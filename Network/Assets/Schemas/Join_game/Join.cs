// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Join_game
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Join : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Join GetRootAsJoin(ByteBuffer _bb) { return GetRootAsJoin(_bb, new Join()); }
  public static Join GetRootAsJoin(ByteBuffer _bb, Join obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Join __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Join_game.Join> CreateJoin(FlatBufferBuilder builder,
      byte player_id = 0) {
    builder.StartTable(1);
    Join.AddPlayerId(builder, player_id);
    return Join.EndJoin(builder);
  }

  public static void StartJoin(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerId(FlatBufferBuilder builder, byte playerId) { builder.AddByte(0, playerId, 0); }
  public static Offset<Join_game.Join> EndJoin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Join_game.Join>(o);
  }
  public static void FinishJoinBuffer(FlatBufferBuilder builder, Offset<Join_game.Join> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedJoinBuffer(FlatBufferBuilder builder, Offset<Join_game.Join> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
