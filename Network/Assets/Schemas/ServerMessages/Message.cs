// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ServerMessages
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Message : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Message GetRootAsMessage(ByteBuffer _bb) { return GetRootAsMessage(_bb, new Message()); }
  public static Message GetRootAsMessage(ByteBuffer _bb, Message obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ServerMessages.Game_Object? Objects(int j) { int o = __p.__offset(4); return o != 0 ? (ServerMessages.Game_Object?)(new ServerMessages.Game_Object()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ServerMessages.Message> CreateMessage(FlatBufferBuilder builder,
      VectorOffset objectsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Message.AddObjects(builder, objectsOffset);
    return Message.EndMessage(builder);
  }

  public static void StartMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(0, objectsOffset.Value, 0); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<ServerMessages.Message> EndMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ServerMessages.Message>(o);
  }
  public static void FinishMessageBuffer(FlatBufferBuilder builder, Offset<ServerMessages.Message> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMessageBuffer(FlatBufferBuilder builder, Offset<ServerMessages.Message> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
